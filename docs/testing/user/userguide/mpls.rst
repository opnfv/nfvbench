.. This work is licensed under a Creative Commons Attribution 4.0 International License.
.. SPDX-License-Identifier: CC-BY-4.0
.. (c) Cisco Systems, Inc

==========================
MPLS encapsulation feature
==========================

This feature allows to generate packets with standard MPLS VPN L3 double stack MPLS labels, where the outer label is transport and the inner label is VPN.
Please refer to RFC-3031 for more details.
The whole MPLS packet structure looks like the following:

###[ Ethernet ]###
  dst       = ['00:8a:96:bb:14:28']
  src       = 3c:fd:fe:a3:48:7c
  type      = 0x8847
###[ MPLS ]### <-------------- Outer Label
     label     = 16303
     cos       = 1
     s         = 0
     ttl       = 255
###[ MPLS ]### <-------------- Inner Label
        label     = 5010
        cos       = 1
        s         = 1
        ttl       = 255
###[ Ethernet ]###
           dst       = fa:16:3e:bd:02:b5
           src       = 3c:fd:fe:a3:48:7c
           type      = 0x800
###[ IP ]###
              version   = 4
              ihl       = None
              tos       = 0x0
              len       = None
              id        = 1
              flags     =
              frag      = 0
              ttl       = 64
              proto     = udp
              chksum    = None
              src       = 16.0.0.1
              dst       = 48.0.0.1
              \options   \
###[ UDP ]###
                 sport     = 53
                 dport     = 53
                 len       = None
                 chksum    = None

Example: nfvbench generates mpls traffic port A ----> port B
On a first packet generated by port A should delivered by MPLS domain infrastructure towards openstack compute where VM in specific
openstack network is resided. This operation happens based on a transport label which will be terminated during decapsulation process.
Transport label parameter described in nfvbench configuration file as a 'mpls_transport_labels'.
On a second step packet should be forwarded to specific openstack network. This operation happens based on a vpn label which will be
terminated during decapsulation process. VPN label described in nfvbench configuration file as a 'segmentation_id'.
On a third step decapsulated L2 packet will be forwarded to the specific VM based on a destination MAC address.
On a fourth step L2 header of the packet will be modified by VM and forwarded towards new destination MAC address which is correlates with
nfvbench receiving port B. L3 packet stays unchanged.
After forth step packet should be encapsulated again with vpn mpls label (segementation id) of the attached openstack network , but the
expectation here that the data plain should be properly configured to deliver packet constructed by openstack VM towards nvbench port B.

Only 2 MPLS labels stack is supported. If more than two labels stack is required then these operations should be handled by MPLS transport
domain where nfvbench is attached Next-hop mpls router and rest of the mpls domain should be configured accordingly to be able
pop/swap/push labels and deliver packet to the proper destination based on an initial transport label injected by nfvbench, VPN label
should stay unchanged until its delivered to PE (compute node).
Set nfvbench 'mpls' parameter to 'true' to enable MPLS encapsulation.
When this option is enabled internal networks 'network type' parameter value should be 'mpls'
MPLS and VxLAN encapsulations are mutual exclusive features if 'mpls' is 'true' then 'vxlan' should be set to 'false' and vise versa.
no_flow_stats, no_latency_stats, no_latency_streams parametters should be set to 'true' because these features are not supported at the moment.
In future when these features will be supported they will require special NIC hardware.

Example of 2-chain MPLS configuration:
# internal_networks:
#    left:
#        network_type: mpls
#        segmentation_id: [2000, 2001]
#        mpls_transport_labels: [10000, 10000]
#        physical_network: phys_sriov0
#    right:
#        network_type: mpls
#        segmentation_id: [2010, 2011]
#        mpls_transport_labels: [10000, 10000]
#        physical_network: phys_sriov1

Example of how to run:
nfvbench --rate 50000pps --duration 30 --mpls
